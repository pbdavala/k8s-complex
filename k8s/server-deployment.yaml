# Note the apiVersion is apps/v1
apiVersion: apps/v1
#New config file of type Deployment
kind: Deployment    
metadata:
  name: server-deployment
spec:
  replicas: 3    # No. of distinct identical pods this deployment will create
  selector:      # Deployment's way of id-ing the pod's published label that belong to this deployment.
    matchLabels:
      component: server
  template:     # pod-template config for every pod in this deployment
    metadata:
      labels:   # pod's label that is published for the sake of selector of deployment above. 
        component: server
    spec:       # spec for containers in the pod which is in this deployment.
      containers:      # list of containers that we want created with every pod controlled by this deployment.
      - name: server   # name of the container inside the pod
        image: pdavala/multi-complex-server   # image for the container inside pod.         
        ports:
          - containerPort: 5000    # Port that is the multi-server image is listening on inside index.js 
        env:
          - name: REDIS_HOST
            value: redis-cluster-ip-service   # name of the ClusterIP Service for redis
          - name: REDIS_PORT
            value: '6379'     # Default. port for redis and also defined in redis-cluster-ip-service.yaml
          - name: PGUSER    # postgres user id
            value: postgres
          - name: PGHOST    # name of the clusterip service that is managing access to postgres-pod
            value: postgres-cluster-ip-service      # name of the ClusterIP Service for postgres pod (from postgres-ip-service.yaml)
          - name: PGPORT
            value: '5432'       # Default. port for postgre and also defined in postgres-cluster-ip-service.yaml
          - name: PGDATABASE  # postgres database
            value: postgres   # default postgres db.
          - name: PGPASSWORD      # Env var for pg password (Created as a secret and also defined in keys.js in server proj.)
            valueFrom:
                secretKeyRef:       # (kubectl create secret generic pgpassword --from-literal PGPASSWORD=........)
                  name: pgpassword  # Name of the secret generated by the imperative cmd.
                  key: PGPASSWORD   # Key name in the above secret
                  